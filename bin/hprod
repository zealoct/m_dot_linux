#!/bin/env python

import os
import sys
import argparse
import re
import subprocess

USAGE = """\
Hanjinchen PRODuction helper

usage: hprod <command> <module name> [<module version]
commands
    fetch   fetch specific version of production of the given module
    list    list given module's available tags
arguments
    <module name>     module path related to /baidu directory
    <module version>  module versoin string, no prefix and surfix needed
example
    % hprod list fpga-ai/api
        5-0-0-1
        5-0-1-1
    % hprod fetch fpga-ai/api 5-0-1-1\
"""

def print_usage():
    print (USAGE)

'''
wget -r -nH --level=0 --cut-dirs=6
    getprod@product.scm.baidu.com:/data/prod-64/baidu/fpga-ai/driver/driver_3-3-2-2_PD_BL/
    --user getprod --password getprod --preserve-permissions
'''
def command_fetch(args):
    if len(args) < 4:
        print_usage()
        return
    module_path = args[2].strip('/')
    module_name = module_path[module_path.rfind('/') + 1:]
    module_version = args[3]
    tag_name = "%s_%s_PD_BL" % (module_name, module_version)
    print "fetching baidu/%s @ %s" % (module_path, module_version)
    subprocess.call(['wget', '-r', '-nH', '--level=0',
        '--cut-dirs=%d' % (5 + module_path.count('/')),
        'getprod@product.scm.baidu.com:/data/prod-64/baidu/%s/%s/' % (module_path, tag_name),
        '--user=getprod', '--password=getprod', '--preserve-permissions'])

def command_list(args):
    if len(args) < 3:
        print_usage()
        return
    module_path = args[2].strip('/')
    module_name = module_path[module_path.rfind('/') + 1:]
    git_repo = 'ssh://hanjinchen@icode.baidu.com:8235/baidu/%s' % (module_path)
    p = subprocess.Popen(['git', 'ls-remote', '--tags', '--refs', git_repo],
            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    out, err = p.communicate()
    version_reg = "%s_([\d\-]+)_PD_BL" % (module_name)
    for tag in out.split():
        m = re.search(version_reg, tag)
        if m:
            print m.group(1)

if __name__ == '__main__':
    if len(sys.argv) < 2:
        print_usage()
    elif sys.argv[1] == 'fetch':
        command_fetch(sys.argv)
    elif sys.argv[1] == 'list':
        command_list(sys.argv)
    else:
        print_usage()
